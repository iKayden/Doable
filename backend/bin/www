#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

// Websockets for Chat
const { Server } = require("socket.io");
const server = http.createServer(app);
const socketIO = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"],
  }
});

let activeChatUsers = [];

socketIO.on("connection", (socket) => {
  console.log(`âš¡: ${socket.id} user just connected!`);

  socket.on('message', (data) => {
    socketIO.emit('messageResponse', data);
  });

  //Listens when a new user joins the server
  socket.on('newUser', (data) => {
    console.log('BEFORE ACTIVE USERS', activeChatUsers);
    //Adds the new user to the list of users

    if (!activeChatUsers.find((user) => user.socketID === socket.id)) {
      activeChatUsers.push({ ...data, socketID: socket.id });
    } else {
      activeChatUsers = activeChatUsers.map((user) => {
        if (user.socketID === socket.id) {
          user.userName = data.userName;
        }

        return user;
      });
    }
    // console.log(activeChatUsers);
    //Sends the list of activeChatUsers to the client
    console.log("ACTIVE USERS", activeChatUsers);
    socketIO.emit('newUserResponse', activeChatUsers);

  });

  socket.on('disconnect', () => {
    console.log('ðŸ”¥: A user disconnected');
    console.log('BEFORE DISCONNECTED USERS', activeChatUsers);
    //Updates the list of users when a user disconnects from the server
    activeChatUsers = activeChatUsers.filter((user) => user.socketID !== socket.id);
    //Sends the list of users to the client
    socketIO.emit('newUserResponse', activeChatUsers);
    console.log('AFTER DISCONNECTED USERS', activeChatUsers);
    socket.disconnect();
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
